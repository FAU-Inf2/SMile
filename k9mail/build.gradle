apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply from: '../gradle/plugins/checkstyle-android.gradle'
apply from: '../gradle/plugins/findbugs-android.gradle'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def supportLibsVersion = '23.0.1'
def androidSupportGroup = 'com.android.support'

dependencies {
    compile project(':k9mail-library')
    compile project(':plugins:Android-PullToRefresh:library')
    compile project(':plugins:HoloColorPicker')
    compile project(':smime-api')
    compile 'commons-io:commons-io:2.4'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile group: androidSupportGroup, name: 'support-v4', version: supportLibsVersion
    compile group: androidSupportGroup, name: 'appcompat-v7', version: supportLibsVersion
    compile group: androidSupportGroup, name: 'preference-v14', version: supportLibsVersion
    compile group: androidSupportGroup, name: 'support-v13', version: supportLibsVersion
    compile group: androidSupportGroup, name: 'cardview-v7', version: supportLibsVersion
    compile group: androidSupportGroup, name: 'recyclerview-v7', version: supportLibsVersion
    compile 'net.sourceforge.htmlcleaner:htmlcleaner:2.10'
    compile 'net.danlew:android.joda:2.8.2'
    compile 'de.cketti.library.changelog:ckchangelog:1.2.2'
    compile 'com.github.bumptech.glide:glide:3.4.0'
    compile 'org.sufficientlysecure:openpgp-api:8.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.daimajia.easing:library:1.0.1@aar'
    compile 'com.daimajia.androidanimations:library:1.1.3@aar'
    compile 'com.daimajia.swipelayout:library:1.2.0@aar'
    
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile('com.icegreen:greenmail:1.4.1') {
        exclude group: 'junit'
    }
    testCompile('org.robolectric:robolectric:3.0-rc3') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile('junit:junit:4.10') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 23

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("unknown")
            storePassword "unknown"
            keyAlias "unknown"
            keyPassword "unknown"
        }
    }

    buildTypes {
        release {
	    signingConfig signingConfigs.release

            buildConfigField "boolean", "DEVELOPER_MODE", "false"
        }

        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled rootProject.testCoverage

            buildConfigField "boolean", "DEVELOPER_MODE", "true"
        }
    }

    // Do not abort build if lint finds errors
    lintOptions {
        abortOnError false
        lintConfig file("$rootProject.projectDir/config/lint/lint.xml")
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }
}

if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }
}
